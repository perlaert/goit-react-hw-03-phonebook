{"version":3,"sources":["components/Filter/Filter.module.css","App.module.css","components/ContactForm/ContactForm.module.css","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","index.js","components/ContactList/ContactList.module.css"],"names":["module","exports","ContactForm","state","name","number","handleChange","event","currentTarget","value","setState","handleSubmit","preventDefault","props","onSubmit","className","style","contactForm","this","labelItem","type","onChange","pattern","required","title","btn","Component","propsTypes","PropTypes","func","isRequired","ContactList","contacts","onDeleteContact","contactsList","map","id","contactItem","onClick","protTypes","arrayOf","shape","string","Filter","filterSection","filterInput","App","initialContacts","filter","addContact","find","contact","toLowerCase","message","alert","shortid","generate","deleteContact","contactId","prevState","changeFilter","getVisibleContacts","normalizedFilter","includes","localStorage","getItem","parsedContacts","JSON","parse","prevProps","setItem","stringify","visibleContacts","container","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fbabc2ef.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterSection\":\"Filter_filterSection__kZIr9\",\"filterInput\":\"Filter_filterInput__u16Kg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactForm\":\"ContactForm_contactForm__OrlO3\",\"labelItem\":\"ContactForm_labelItem__19cGw\",\"btn\":\"ContactForm_btn__2Bpnz\"};","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport style from './ContactForm.module.css';\n\nclass ContactForm extends Component {\n  static propsTypes = {\n    onSubmit: PropTypes.func.isRequired,\n  };\n\n  state = {\n    name: '',\n    number: '',\n  };\n\n  handleChange = event => {\n    const { name, value } = event.currentTarget;\n\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n\n    const { name, number } = this.state;\n\n    this.props.onSubmit(name, number);\n\n    this.setState({ name: '', number: '' });\n  };\n\n  render() {\n    return (\n      <section>\n        <form className={style.contactForm} onSubmit={this.handleSubmit}>\n          <label className={style.labelItem}>\n            Name\n            <input\n              type=\"text\"\n              name=\"name\"\n              value={this.state.name}\n              onChange={this.handleChange}\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              // title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n              required\n            />\n          </label>\n          <label className={style.labelItem}>\n            Number\n            <input\n              type=\"tel\"\n              name=\"number\"\n              value={this.state.number}\n              onChange={this.handleChange}\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n              required\n            />\n          </label>\n          <button type=\"submit\" className={style.btn}>\n            Add contact{' '}\n          </button>\n        </form>\n      </section>\n    );\n  }\n}\n\nexport default ContactForm;\n","import PropTypes from 'prop-types';\nimport style from './ContactList.module.css';\n\nconst ContactList = ({ contacts, onDeleteContact }) => {\n  return (\n    <section>\n      <ul className={style.contactsList}>\n        {contacts.map(({ id, name, number }) => (\n          <li key={id} className={style.contactItem}>\n            <p>{name}: </p>\n            <p>{number}</p>\n            <button\n              className={style.btn}\n              type=\"button\"\n              onClick={() => onDeleteContact(id)}\n            >\n              Delete\n            </button>\n          </li>\n        ))}\n      </ul>\n    </section>\n  );\n};\n\nContactList.protTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }).isRequired,\n  ),\n  onDeleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactList;\n","import PropTypes from 'prop-types';\nimport style from './Filter.module.css';\n\nconst Filter = ({ value = ' ', onChange }) => {\n  return (\n    <div className={style.filterSection}>\n      <label>\n        Find contacts by name\n        <input\n          className={style.filterInput}\n          type=\"text\"\n          value={value}\n          onChange={onChange}\n        ></input>\n      </label>\n    </div>\n  );\n};\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import React, { Component } from 'react';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport ContactList from './components/ContactList/ContactList';\nimport Filter from './components/Filter/Filter';\nimport initialContacts from './data/initialContacts.json';\nimport shortid from 'shortid';\nimport style from './App.module.css';\n\nclass App extends Component {\n  state = {\n    contacts: initialContacts,\n    filter: '',\n  };\n\n  handleChange = event => {\n    this.setState({\n      name: event.currentTarget.value,\n      number: event.currentTarget.value,\n    });\n  };\n\n  addContact = (name, number) => {\n    const { contacts } = this.state;\n\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === name.toLowerCase(),\n      )\n    ) {\n      const message = `${name} is already in contacts`;\n\n      alert(message);\n    } else {\n      const contact = {\n        id: shortid.generate(),\n        name,\n        number,\n      };\n\n      this.setState(({ contacts }) => ({\n        contacts: [contact, ...contacts],\n      }));\n    }\n  };\n\n  deleteContact = contactId => {\n    this.setState(prevState => ({\n      contacts: prevState.contacts.filter(contact => contact.id !== contactId),\n    }));\n  };\n\n  changeFilter = event => {\n    this.setState({\n      filter: event.currentTarget.value,\n    });\n  };\n\n  getVisibleContacts = () => {\n    const { contacts, filter } = this.state;\n\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n\n  componentDidMount() {\n    const contacts = localStorage.getItem('contacts');\n    const parsedContacts = JSON.parse(contacts);\n\n    if (parsedContacts) {\n      this.setState({ contacts: parsedContacts });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.contacts !== prevState.contacts) {\n      localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n    }\n  }\n\n  render() {\n    const { filter } = this.state;\n    const visibleContacts = this.getVisibleContacts();\n\n    return (\n      <section className={style.container}>\n        <h1>Phonebook</h1>\n        <ContactForm onSubmit={this.addContact} />\n\n        <h2>Contacts</h2>\n        <Filter value={filter} onChange={this.changeFilter} />\n        <ContactList\n          contacts={visibleContacts}\n          onDeleteContact={this.deleteContact}\n        />\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactsList\":\"ContactList_contactsList__14Z-h\",\"contactItem\":\"ContactList_contactItem__EQAbQ\",\"btn\":\"ContactList_btn__1Xk4q\"};"],"sourceRoot":""}